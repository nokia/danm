/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nokia/danm/crd/apis/danm/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DanmEpLister helps list DanmEps.
// All objects returned here must be treated as read-only.
type DanmEpLister interface {
	// List lists all DanmEps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DanmEp, err error)
	// DanmEps returns an object that can list and get DanmEps.
	DanmEps(namespace string) DanmEpNamespaceLister
	DanmEpListerExpansion
}

// danmEpLister implements the DanmEpLister interface.
type danmEpLister struct {
	indexer cache.Indexer
}

// NewDanmEpLister returns a new DanmEpLister.
func NewDanmEpLister(indexer cache.Indexer) DanmEpLister {
	return &danmEpLister{indexer: indexer}
}

// List lists all DanmEps in the indexer.
func (s *danmEpLister) List(selector labels.Selector) (ret []*v1.DanmEp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DanmEp))
	})
	return ret, err
}

// DanmEps returns an object that can list and get DanmEps.
func (s *danmEpLister) DanmEps(namespace string) DanmEpNamespaceLister {
	return danmEpNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DanmEpNamespaceLister helps list and get DanmEps.
// All objects returned here must be treated as read-only.
type DanmEpNamespaceLister interface {
	// List lists all DanmEps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DanmEp, err error)
	// Get retrieves the DanmEp from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DanmEp, error)
	DanmEpNamespaceListerExpansion
}

// danmEpNamespaceLister implements the DanmEpNamespaceLister
// interface.
type danmEpNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DanmEps in the indexer for a given namespace.
func (s danmEpNamespaceLister) List(selector labels.Selector) (ret []*v1.DanmEp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DanmEp))
	})
	return ret, err
}

// Get retrieves the DanmEp from the indexer for a given namespace and name.
func (s danmEpNamespaceLister) Get(name string) (*v1.DanmEp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("danmep"), name)
	}
	return obj.(*v1.DanmEp), nil
}
